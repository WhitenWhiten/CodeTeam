# roles/qa_agent_async.py
from __future__ import annotations
from typing import Dict, Any, List, Set
from actions.generate_tests import GenerateTestsAction
from actions.run_tests import RunTestsAction
from utils.logger import get_logger

class QAAgentAsync:
    def __init__(self, llm, repo_manager, runtime_adapter, event_bus, sds=None):
        self.llm = llm
        self.repo = repo_manager
        self.adapter = runtime_adapter
        self.bus = event_bus
        self.sds = sds
        self.log = get_logger("QA")
        self.file_owner: Dict[str, str] = {}
        if sds:
            for a in sds.dev_plan:
                for f in a.file_paths:
                    self.file_owner[f] = a.developer_id
        self._gen = GenerateTestsAction(llm=llm)
        self._run = RunTestsAction()

    async def init_tests(self, sds_json: dict):
        res = await self._gen.run(sds=sds_json, llm=self.llm)
        for fpath, content in res["tests"].items():
            self.repo.write_file(fpath, content, agent_id="QA")
        self.repo.commit_all("test: initial tests generated by QA")
        self.run_command = res["run_command"]
        self.log.info("tests initialized")

    async def run_and_feedback(self):
        result = await self._run.run(repo_root=str(self.repo.root), run_command=self.run_command, runtime_adapter=self.adapter)
        fix_suggestions = self._map_failures(result.get("failures", []))
        result["fix_suggestions"] = fix_suggestions
        await self.bus.emit("qa_result", result)
        self.log.info(f"qa_result success={result.get('success')}, fixes={len(fix_suggestions)}")
        return result

    def _map_failures(self, failures: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        suggestions = []
        src_files: Set[str] = set(self.file_owner.keys())
        for fail in failures:
            fp = fail.get("file_path", "")
            stack = fail.get("stack", "")
            target = None
            for line in stack.splitlines():
                for sf in src_files:
                    if sf in line:
                        target = sf
                        break
                if target: break
            if not target and fp in src_files:
                target = fp
            if not target:
                for sf in src_files:
                    suggestions.append({"dev_id": self.file_owner[sf], "file_path": sf, "issues": fail})
            else:
                suggestions.append({"dev_id": self.file_owner[target], "file_path": target, "issues": fail})
        return suggestions
